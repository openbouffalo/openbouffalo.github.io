import{_ as e,c as o,o as t,a as s}from"./app.6b25eb76.js";const p=JSON.parse('{"title":"Errata","description":"","frontmatter":{},"headers":[{"level":2,"title":"Issues with running image loaded by BootROM","slug":"issues-with-running-image-loaded-by-bootrom","link":"#issues-with-running-image-loaded-by-bootrom","children":[]}],"relativePath":"chips/bl70x/errata.md","lastUpdated":1666177315000}'),a={name:"chips/bl70x/errata.md"},i=s('<h1 id="errata" tabindex="-1">Errata <a class="header-anchor" href="#errata" aria-hidden="true">#</a></h1><blockquote><p>Applies to BL702, BL704 and BL706</p></blockquote><h2 id="issues-with-running-image-loaded-by-bootrom" tabindex="-1">Issues with running image loaded by BootROM <a class="header-anchor" href="#issues-with-running-image-loaded-by-bootrom" aria-hidden="true">#</a></h2><p>For some reason, <code>BOOTROM_RUN_IMAGE</code> (<code>0x1A</code>) command in BootROM, doesn&#39;t work properly, and because of it, eflash_loader have issues with initializing USB (so sometimes in Windows, the UART driver freeze, so it can&#39;t communicate with eflash_loader). (NOTE: This is observation, other issues are not known yet)</p><p>To workaround this, there are three registers set, via <code>BOOTROM_WRITE_MEM</code> (<code>0x50</code>) command in BootROM:</p><ul><li><code>0x4000F100 =&gt; 0x4E424845</code> (This sets <code>RSV0</code> to <code>HBN_STATUS_ENTER_FLAG</code> in Deep Sleep Control (Hibernate) core, in SDK it is used as set <code>STATUS</code> flag. (<em>gamiee</em>: My guess is that BootROM read this after CPU reset?))</li><li><code>0x4000F104 =&gt; 0x22010000</code> (This sets <code>RSV1</code> register in Hibernate core, in SDK it is used as WakeUp Address, and exactly we write the launch address, where eflash_loader should be) (<em>gamiee</em>: those reserved registers in HBN does nothing at all, just those values are preserved between CPU Resets)</li><li><code>0x40000018 =&gt; 0x00000002</code> (This sets <code>swrst_cfg2</code> register in Global Control Register, enabling register <code>reg_ctrl_cpu_reset</code>)</li></ul><p>You can find this workaround in <code>bflb_mcu_tool</code> in file <code>bflb_mcu_tool/libs/bl702/chiptype_patch.py</code>.</p>',7),r=[i];function d(n,c,l,h,_,u){return t(),o("div",null,r)}const g=e(a,[["render",d]]);export{p as __pageData,g as default};
