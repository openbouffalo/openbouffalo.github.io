<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BL70X on open-bouffalo</title><link>https://openbouffalo.github.io/chips/bl70x/</link><description>Recent content in BL70X on open-bouffalo</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://openbouffalo.github.io/chips/bl70x/index.xml" rel="self" type="application/rss+xml"/><item><title>BootROM</title><link>https://openbouffalo.github.io/chips/bl70x/bootrom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openbouffalo.github.io/chips/bl70x/bootrom/</guid><description>General information Location: 0x21000000 - 0x21020000 Size: 128 KiB Can boot from: USB, UART, SPI Flash BootROM mode trigger: IO28 pulled HIGH Boot Info header structure Size: 24 Bytes
Byte 0 - 3 - BootROM version Byte 4 - Sign configuration Byte 5 - Encrypt configuration Byte 6 - 15 - Unknown Byte 16 - 23 - ChipID (Something related to MAC) Dumps File Chip Version Build Date Dumped by bl706-bootrom.</description></item><item><title>eFuse</title><link>https://openbouffalo.github.io/chips/bl70x/efuse/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openbouffalo.github.io/chips/bl70x/efuse/</guid><description>Applies to BL702, BL704 and BL706
Size: 1Kbit
eFuse is one time programmable memory. It&amp;rsquo;s mostly used to store things like MAC Address, encryption keys and all other stuff, which are not possible to change after it being burned into eFuse.
In case of BL70X eFuse, once you burn the bit in eFuse, it&amp;rsquo;s not possible to revert it. You can also write/read lock of specific eFuse slots/areas.
The structure of the eFuse is available in Bouffalo&amp;rsquo;s SDK and bfl_mcu_tools (file efuse_cfg_keys.</description></item><item><title>Errata</title><link>https://openbouffalo.github.io/chips/bl70x/errata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openbouffalo.github.io/chips/bl70x/errata/</guid><description>Applies to BL702, BL704 and BL706
Issues with running image loaded by BootROM For some reason, BOOTROM_RUN_IMAGE (0x1A) command in BootROM, doesn&amp;rsquo;t work properly, and because of it, eflash_loader have issues with initializing USB (so sometimes in Windows, the UART driver freeze, so it can&amp;rsquo;t communicate with eflash_loader). (NOTE: This is observation, other issues are not known yet)
To workaround this, there are three registers set, via BOOTROM_WRITE_MEM (0x50) command in BootROM:</description></item></channel></rss>